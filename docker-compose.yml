# Copyright: YC-2025Copyright
# Created: 2025-09-03
# Author: YC
# Description: Docker Compose configuration for PHP Analysis MCP Server

version: '3.8'

services:
  # Main MCP Server
  php-analysis-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: php-analysis-mcp-server
    restart: unless-stopped
    ports:
      - "${MCP_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - MCP_PORT=3000
      - MCP_HOST=0.0.0.0
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - MAX_MEMORY=${MAX_MEMORY:-1024}
      - PLUGINS_ENABLED=${PLUGINS_ENABLED:-true}
      - PHP_VERSION=${PHP_VERSION:-8.2}
    volumes:
      # Application logs
      - ./logs:/app/logs
      # Plugin storage
      - ./plugins:/app/plugins
      # Data persistence
      - ./data:/app/data
      # Configuration (optional)
      - ./config:/app/config:ro
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: php-analysis-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
    volumes:
      - redis-data:/data
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # PostgreSQL for audit logs and metadata
  postgres:
    image: postgres:15-alpine
    container_name: php-analysis-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-php_analysis_mcp}
      - POSTGRES_USER=${POSTGRES_USER:-mcpserver}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcpserver}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: php-analysis-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - mcp-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: php-analysis-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mcp-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

# Networks
networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local