<?php

declare(strict_types=1);

namespace YcPca\Security\Reports;

/**
 * Comprehensive vulnerability report with risk assessment and remediation guidance
 */
class VulnerabilityReport
{
    private array $vulnerabilities;
    private array $metrics;
    private array $summary;
    private array $recommendations;
    private float $overallRiskScore;

    public function __construct(array $vulnerabilities, array $metrics)
    {
        $this->vulnerabilities = $vulnerabilities;
        $this->metrics = $metrics;
        $this->generateSummary();
        $this->calculateOverallRiskScore();
        $this->generateRecommendations();
    }

    /**
     * Generate executive summary
     */
    private function generateSummary(): void
    {
        $this->summary = [
            'total_vulnerabilities' => count($this->vulnerabilities),
            'unique_types' => $this->getUniqueTypes(),
            'affected_files' => $this->getAffectedFiles(),
            'critical_count' => $this->countBySeverity('CRITICAL'),
            'high_count' => $this->countBySeverity('HIGH'),
            'medium_count' => $this->countBySeverity('MEDIUM'),
            'low_count' => $this->countBySeverity('LOW'),
            'info_count' => $this->countBySeverity('INFO'),
            'exploitable_count' => $this->countExploitable(),
            'with_known_exploits' => $this->countWithKnownExploits(),
            'user_reachable' => $this->countUserReachable(),
            'top_vulnerability_types' => $this->getTopVulnerabilityTypes(5),
            'compliance_status' => $this->assessCompliance(),
        ];
    }

    /**
     * Calculate overall risk score
     */
    private function calculateOverallRiskScore(): void
    {
        if (empty($this->vulnerabilities)) {
            $this->overallRiskScore = 0.0;
            return;
        }

        $totalScore = 0.0;
        $weights = [
            'CRITICAL' => 10.0,
            'HIGH' => 7.0,
            'MEDIUM' => 4.0,
            'LOW' => 1.0,
            'INFO' => 0.1,
        ];

        foreach ($this->vulnerabilities as $vuln) {
            $severity = $vuln['severity'] ?? 'MEDIUM';
            $riskScore = $vuln['risk_score'] ?? 5.0;
            $weight = $weights[$severity] ?? 1.0;
            
            // Additional factors
            if ($vuln['exploitable'] ?? false) {
                $weight *= 1.5;
            }
            if ($vuln['known_exploits'] ?? false) {
                $weight *= 2.0;
            }
            if ($vuln['user_reachable'] ?? false) {
                $weight *= 1.3;
            }
            
            $totalScore += $riskScore * $weight;
        }

        // Normalize to 0-10 scale
        $this->overallRiskScore = min(10.0, $totalScore / max(1, count($this->vulnerabilities)));
    }

    /**
     * Generate recommendations based on findings
     */
    private function generateRecommendations(): void
    {
        $this->recommendations = [];

        // Critical recommendations
        if ($this->summary['critical_count'] > 0) {
            $this->recommendations['immediate'] = [
                'priority' => 'IMMEDIATE',
                'actions' => [
                    'Address all CRITICAL vulnerabilities immediately',
                    'Conduct emergency security review',
                    'Consider taking affected systems offline until fixed',
                    'Implement temporary mitigations if immediate fix not possible',
                ],
            ];
        }

        // High priority recommendations
        if ($this->summary['high_count'] > 0) {
            $this->recommendations['high'] = [
                'priority' => 'HIGH',
                'timeline' => '24-48 hours',
                'actions' => [
                    'Fix HIGH severity vulnerabilities within 48 hours',
                    'Implement input validation and output encoding',
                    'Review and update security configurations',
                    'Enable security monitoring for affected components',
                ],
            ];
        }

        // Security practices
        $practices = [];
        
        // SQL Injection recommendations
        if ($this->hasVulnerabilityType('sql_injection')) {
            $practices[] = 'Implement parameterized queries throughout the application';
            $practices[] = 'Use ORM with proper escaping';
            $practices[] = 'Implement database access layer with security controls';
            $practices[] = 'Enable SQL query logging and monitoring';
        }

        // XSS recommendations
        if ($this->hasVulnerabilityType('xss')) {
            $practices[] = 'Implement Content Security Policy (CSP)';
            $practices[] = 'Use context-aware output encoding';
            $practices[] = 'Sanitize all user inputs';
            $practices[] = 'Use secure templating engines';
        }

        // Authentication recommendations
        if ($this->hasVulnerabilityType('authentication')) {
            $practices[] = 'Implement multi-factor authentication';
            $practices[] = 'Use secure session management';
            $practices[] = 'Implement account lockout mechanisms';
            $practices[] = 'Use strong password policies';
        }

        // Code execution recommendations
        if ($this->hasVulnerabilityType('code_execution')) {
            $practices[] = 'Remove all eval() and similar dangerous functions';
            $practices[] = 'Implement strict input validation';
            $practices[] = 'Use safe alternatives to dynamic code execution';
            $practices[] = 'Enable code execution monitoring';
        }

        if (!empty($practices)) {
            $this->recommendations['security_practices'] = [
                'priority' => 'MEDIUM',
                'timeline' => '1-2 weeks',
                'actions' => $practices,
            ];
        }

        // General recommendations
        $this->recommendations['general'] = [
            'priority' => 'ONGOING',
            'actions' => [
                'Implement regular security scanning in CI/CD pipeline',
                'Conduct periodic security code reviews',
                'Keep all dependencies and frameworks updated',
                'Implement security training for development team',
                'Establish secure coding standards',
                'Use static analysis tools in development workflow',
            ],
        ];

        // Compliance recommendations
        if ($this->summary['compliance_status']['owasp_coverage'] < 100) {
            $this->recommendations['compliance'] = [
                'priority' => 'MEDIUM',
                'actions' => [
                    'Achieve full OWASP Top 10 coverage',
                    'Implement missing security controls',
                    'Document security measures for compliance',
                    'Conduct regular compliance assessments',
                ],
            ];
        }
    }

    /**
     * Generate detailed HTML report
     */
    public function generateHtmlReport(): string
    {
        $html = <<<HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Vulnerability Report</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
        h2 { color: #34495e; margin-top: 30px; }
        .risk-score { font-size: 48px; font-weight: bold; text-align: center; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .risk-critical { background: #e74c3c; color: white; }
        .risk-high { background: #e67e22; color: white; }
        .risk-medium { background: #f39c12; color: white; }
        .risk-low { background: #95a5a6; color: white; }
        .summary-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .summary-card { background: #f8f9fa; padding: 15px; border-radius: 6px; border-left: 4px solid #3498db; }
        .summary-card h3 { margin: 0 0 10px 0; color: #2c3e50; font-size: 14px; text-transform: uppercase; }
        .summary-card .value { font-size: 32px; font-weight: bold; color: #34495e; }
        .vulnerability { background: #fff; border: 1px solid #ddd; border-radius: 6px; padding: 20px; margin: 15px 0; }
        .vuln-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }
        .severity { padding: 5px 10px; border-radius: 4px; font-weight: bold; text-transform: uppercase; font-size: 12px; }
        .severity-critical { background: #e74c3c; color: white; }
        .severity-high { background: #e67e22; color: white; }
        .severity-medium { background: #f39c12; color: white; }
        .severity-low { background: #95a5a6; color: white; }
        .severity-info { background: #3498db; color: white; }
        .code-block { background: #2c3e50; color: #ecf0f1; padding: 15px; border-radius: 4px; overflow-x: auto; margin: 10px 0; }
        .recommendation { background: #d4edda; border: 1px solid #c3e6cb; border-radius: 4px; padding: 15px; margin: 10px 0; }
        .recommendation h4 { margin: 0 0 10px 0; color: #155724; }
        .tags { display: flex; gap: 8px; flex-wrap: wrap; margin: 10px 0; }
        .tag { background: #e9ecef; padding: 4px 8px; border-radius: 3px; font-size: 12px; }
        .exploitable { background: #dc3545; color: white; }
        .compliance-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .compliance-table th, .compliance-table td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
        .compliance-table th { background: #f8f9fa; font-weight: bold; }
        .progress-bar { background: #e9ecef; border-radius: 4px; height: 20px; overflow: hidden; }
        .progress-fill { background: #28a745; height: 100%; transition: width 0.3s; }
    </style>
</head>
<body>
    <div class="container">
HTML;

        // Header
        $riskClass = $this->getRiskClass($this->overallRiskScore);
        $html .= sprintf(
            '<h1>Security Vulnerability Report</h1>
            <div class="risk-score %s">Overall Risk Score: %.1f/10</div>',
            $riskClass,
            $this->overallRiskScore
        );

        // Summary cards
        $html .= '<div class="summary-grid">';
        $html .= sprintf(
            '<div class="summary-card">
                <h3>Total Vulnerabilities</h3>
                <div class="value">%d</div>
            </div>',
            $this->summary['total_vulnerabilities']
        );
        
        foreach (['CRITICAL', 'HIGH', 'MEDIUM', 'LOW'] as $severity) {
            $count = $this->countBySeverity($severity);
            if ($count > 0) {
                $html .= sprintf(
                    '<div class="summary-card">
                        <h3>%s Severity</h3>
                        <div class="value">%d</div>
                    </div>',
                    $severity,
                    $count
                );
            }
        }
        
        $html .= sprintf(
            '<div class="summary-card">
                <h3>Exploitable</h3>
                <div class="value">%d</div>
            </div>',
            $this->summary['exploitable_count']
        );
        $html .= '</div>';

        // Compliance status
        $html .= '<h2>Compliance Status</h2>';
        $html .= '<table class="compliance-table">';
        $html .= '<tr><th>Standard</th><th>Coverage</th><th>Status</th></tr>';
        
        foreach ($this->summary['compliance_status'] as $standard => $coverage) {
            $html .= sprintf(
                '<tr>
                    <td>%s</td>
                    <td>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: %d%%"></div>
                        </div>
                    </td>
                    <td>%d%%</td>
                </tr>',
                strtoupper(str_replace('_', ' ', $standard)),
                $coverage,
                $coverage
            );
        }
        $html .= '</table>';

        // Recommendations
        $html .= '<h2>Recommendations</h2>';
        foreach ($this->recommendations as $category => $rec) {
            $html .= '<div class="recommendation">';
            $html .= sprintf('<h4>%s Priority</h4>', $rec['priority']);
            if (isset($rec['timeline'])) {
                $html .= sprintf('<p><strong>Timeline:</strong> %s</p>', $rec['timeline']);
            }
            $html .= '<ul>';
            foreach ($rec['actions'] as $action) {
                $html .= sprintf('<li>%s</li>', htmlspecialchars($action));
            }
            $html .= '</ul></div>';
        }

        // Detailed vulnerabilities
        $html .= '<h2>Vulnerability Details</h2>';
        foreach ($this->vulnerabilities as $vuln) {
            $html .= '<div class="vulnerability">';
            $html .= '<div class="vuln-header">';
            $html .= sprintf(
                '<h3>%s - %s</h3>',
                ucfirst(str_replace('_', ' ', $vuln['type'])),
                $vuln['subtype'] ?? 'General'
            );
            $html .= sprintf(
                '<span class="severity severity-%s">%s</span>',
                strtolower($vuln['severity']),
                $vuln['severity']
            );
            $html .= '</div>';
            
            $html .= sprintf('<p><strong>Description:</strong> %s</p>', htmlspecialchars($vuln['message']));
            $html .= sprintf('<p><strong>File:</strong> %s (Line %d)</p>', 
                htmlspecialchars($vuln['file'] ?? 'Unknown'),
                $vuln['line'] ?? 0
            );
            
            // Tags
            $html .= '<div class="tags">';
            if ($vuln['exploitable'] ?? false) {
                $html .= '<span class="tag exploitable">Exploitable</span>';
            }
            if ($vuln['known_exploits'] ?? false) {
                $html .= '<span class="tag exploitable">Known Exploits</span>';
            }
            if ($vuln['user_reachable'] ?? false) {
                $html .= '<span class="tag">User Reachable</span>';
            }
            $html .= sprintf('<span class="tag">Confidence: %.0f%%</span>', ($vuln['confidence'] ?? 0.5) * 100);
            $html .= '</div>';
            
            // Fix suggestion
            if (isset($vuln['fix_suggestion'])) {
                $html .= sprintf(
                    '<div class="recommendation">
                        <h4>Fix Suggestion</h4>
                        <p>%s</p>
                    </div>',
                    htmlspecialchars($vuln['fix_suggestion'])
                );
            }
            
            // Code example if available
            if (isset($vuln['code_example'])) {
                $html .= '<div class="code-block"><pre>' . htmlspecialchars($vuln['code_example']) . '</pre></div>';
            }
            
            $html .= '</div>';
        }

        $html .= '</div></body></html>';
        
        return $html;
    }

    /**
     * Generate JSON report
     */
    public function generateJsonReport(): array
    {
        return [
            'summary' => $this->summary,
            'overall_risk_score' => $this->overallRiskScore,
            'risk_level' => $this->getRiskLevel(),
            'metrics' => $this->metrics,
            'vulnerabilities' => $this->vulnerabilities,
            'recommendations' => $this->recommendations,
            'generated_at' => date('Y-m-d H:i:s'),
        ];
    }

    /**
     * Generate Markdown report
     */
    public function generateMarkdownReport(): string
    {
        $md = "# Security Vulnerability Report\n\n";
        $md .= sprintf("**Overall Risk Score:** %.1f/10 (%s)\n\n", 
            $this->overallRiskScore,
            $this->getRiskLevel()
        );
        
        // Summary
        $md .= "## Summary\n\n";
        $md .= sprintf("- **Total Vulnerabilities:** %d\n", $this->summary['total_vulnerabilities']);
        $md .= sprintf("- **Critical:** %d\n", $this->summary['critical_count']);
        $md .= sprintf("- **High:** %d\n", $this->summary['high_count']);
        $md .= sprintf("- **Medium:** %d\n", $this->summary['medium_count']);
        $md .= sprintf("- **Low:** %d\n", $this->summary['low_count']);
        $md .= sprintf("- **Exploitable:** %d\n", $this->summary['exploitable_count']);
        $md .= "\n";
        
        // Top vulnerability types
        $md .= "## Top Vulnerability Types\n\n";
        foreach ($this->summary['top_vulnerability_types'] as $type => $count) {
            $md .= sprintf("1. %s: %d occurrences\n", ucfirst(str_replace('_', ' ', $type)), $count);
        }
        $md .= "\n";
        
        // Recommendations
        $md .= "## Recommendations\n\n";
        foreach ($this->recommendations as $category => $rec) {
            $md .= sprintf("### %s Priority\n\n", $rec['priority']);
            if (isset($rec['timeline'])) {
                $md .= sprintf("**Timeline:** %s\n\n", $rec['timeline']);
            }
            foreach ($rec['actions'] as $action) {
                $md .= sprintf("- %s\n", $action);
            }
            $md .= "\n";
        }
        
        // Detailed vulnerabilities
        $md .= "## Vulnerability Details\n\n";
        foreach ($this->vulnerabilities as $i => $vuln) {
            $md .= sprintf("### %d. %s (%s)\n\n",
                $i + 1,
                ucfirst(str_replace('_', ' ', $vuln['type'])),
                $vuln['severity']
            );
            $md .= sprintf("**Description:** %s\n\n", $vuln['message']);
            $md .= sprintf("**Location:** %s (Line %d)\n\n",
                $vuln['file'] ?? 'Unknown',
                $vuln['line'] ?? 0
            );
            
            if (isset($vuln['fix_suggestion'])) {
                $md .= sprintf("**Fix:** %s\n\n", $vuln['fix_suggestion']);
            }
            
            if ($vuln['exploitable'] ?? false) {
                $md .= "⚠️ **This vulnerability is exploitable**\n\n";
            }
        }
        
        return $md;
    }

    /**
     * Get risk level based on score
     */
    private function getRiskLevel(): string
    {
        if ($this->overallRiskScore >= 8.0) return 'CRITICAL';
        if ($this->overallRiskScore >= 6.0) return 'HIGH';
        if ($this->overallRiskScore >= 4.0) return 'MEDIUM';
        if ($this->overallRiskScore >= 2.0) return 'LOW';
        return 'MINIMAL';
    }

    /**
     * Get risk class for HTML styling
     */
    private function getRiskClass(float $score): string
    {
        if ($score >= 8.0) return 'risk-critical';
        if ($score >= 6.0) return 'risk-high';
        if ($score >= 4.0) return 'risk-medium';
        return 'risk-low';
    }

    /**
     * Helper methods
     */
    private function countBySeverity(string $severity): int
    {
        return count(array_filter($this->vulnerabilities, function ($v) use ($severity) {
            return ($v['severity'] ?? '') === $severity;
        }));
    }

    private function countExploitable(): int
    {
        return count(array_filter($this->vulnerabilities, function ($v) {
            return $v['exploitable'] ?? false;
        }));
    }

    private function countWithKnownExploits(): int
    {
        return count(array_filter($this->vulnerabilities, function ($v) {
            return $v['known_exploits'] ?? false;
        }));
    }

    private function countUserReachable(): int
    {
        return count(array_filter($this->vulnerabilities, function ($v) {
            return $v['user_reachable'] ?? false;
        }));
    }

    private function getUniqueTypes(): int
    {
        return count(array_unique(array_column($this->vulnerabilities, 'type')));
    }

    private function getAffectedFiles(): int
    {
        return count(array_unique(array_filter(array_column($this->vulnerabilities, 'file'))));
    }

    private function getTopVulnerabilityTypes(int $limit): array
    {
        $types = [];
        foreach ($this->vulnerabilities as $vuln) {
            $type = $vuln['type'] ?? 'unknown';
            $types[$type] = ($types[$type] ?? 0) + 1;
        }
        arsort($types);
        return array_slice($types, 0, $limit, true);
    }

    private function hasVulnerabilityType(string $type): bool
    {
        foreach ($this->vulnerabilities as $vuln) {
            if (($vuln['type'] ?? '') === $type) {
                return true;
            }
        }
        return false;
    }

    private function assessCompliance(): array
    {
        $owaspTypes = [
            'sql_injection', 'xss', 'broken_auth', 'sensitive_data',
            'xxe', 'access_control', 'security_misconfig', 'csrf',
            'deserialization', 'logging'
        ];
        
        $foundTypes = array_unique(array_column($this->vulnerabilities, 'type'));
        $coverage = count(array_intersect($owaspTypes, $foundTypes)) / count($owaspTypes) * 100;
        
        return [
            'owasp_coverage' => (int)$coverage,
            'pci_dss_ready' => $this->summary['critical_count'] === 0,
            'gdpr_compliant' => !$this->hasVulnerabilityType('sensitive_data'),
        ];
    }

    // Getters
    public function getVulnerabilities(): array { return $this->vulnerabilities; }
    public function getMetrics(): array { return $this->metrics; }
    public function getSummary(): array { return $this->summary; }
    public function getRecommendations(): array { return $this->recommendations; }
    public function getOverallRiskScore(): float { return $this->overallRiskScore; }
}